$.extend({
    keys: function(obj){
        var a = [];
        $.each(obj, function(k){ a.push(k) });
        return a;
    }
});

$.urlParam = function(name){
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    if (results==null){
        return null;
    }
    else{
        return results[1] || 0;
    }
}

if (!Array.indexOf) Array.prototype.indexOf = function(obj) {
    for(var i = 0; i < this.length; i++){
        if(this[i] == obj) {
            return i;
        }
    }
    return -1;
}

if (!Array.find_matches) Array.find_matches = function(a) {
    var i, m = [];
    a = a.sort();
    i = a.length
    while(i--) {
        if (a[i - 1] == a[i]) {
            m.push(a[i]);
        }
    }
    if (m.length == 0) {
        return false;
    }
    return m;
}

function VariantOptions(params) {

    var options = params['options'];
    var i18n = params['i18n'];
    var allow_backorders = !params['track_inventory_levels'];
    var allow_select_outofstock = params['allow_select_outofstock'];
    var default_instock = params['default_instock'];

    // Variable necesaria para mostrar el precio de costo.
    var products = $('#product-for-js').data('product');

    var variant, divs, parent, index = 0;
    var selection = [];
    var buttons;
    var booleano = false;

    function init() {
        divs = $('#product-variants .variant-options');
        disable(divs.find('a.option-value').addClass('locked'));
        update();
        enable(parent.find('a.option-value'));
        toggle();
        $('div.variant-options a.clear-button').hide().click(handle_clear);

        if (default_instock) {
            divs.each(function(){
                $(this).find("ul.variant-option-values li a.in-stock:first").click();
            });
        }

        // Añadimos funcionalidad para seleccionar primera variant disponible. 
        option_value_0 = $('#product-variants .variant-options.index-0').find('a.option-value.in-stock');
        option_value_0.first().click();        

        option_value_1 = $('#product-variants .variant-options.index-1').find('a.option-value.in-stock'); 
        option_value_1.first().click();

        if ((option_value_0.length + option_value_1.length) == 0){
            $('button#add-to-cart-button').attr('disabled', true).fadeTo(100, 0.5);
            $('#product-price').html('<span class="out-of-stock"><%= Spree.t(:out_of_stock) %></span>');
        } else {
            $('button#add-to-cart-button').attr('disabled', false).fadeTo(100, 1);
        }

        // Añadimos funcionalidad 'alert' para mostrar aviso de falta seleccionar una opcion.
        $('#add-to-cart-button').on('click', function (event) {
            var selected = divs.find('a.selected');
            if (selected.length != divs.length) {
                event.preventDefault();
                $('#shadow-alert').css({'display': 'inherit'});
                $('#alert-select-variant').css({'display': 'inherit', 'visibility': 'visible'});
                return false;
            } else {
                $('#shadow-alert').css({'display': 'none'});
                $('#alert-select-variant').css({'display': 'none', 'visibility': 'hidden'});
            }
        });

        $('#alert-select-variant-button').on('click', function(event){
            $('#shadow-alert').css({ 'display': 'none'});
            $('#alert-select-variant').css({'display': 'none', 'visibility': 'hidden'});
        });

    }

    function get_index(parent) {
        return parseInt($(parent).attr('class').replace(/[^\d]/g, ''));
    }

    function update(i) {
        index = isNaN(i) ? index : i;
        parent = $(divs.get(index));
        buttons = parent.find('a.option-value');
        parent.find('a.clear-button').hide();
    }

    function disable(btns) {
        return btns.removeClass('selected');
    }

    function enable(btns) {
        bt = btns.not('.unavailable').removeClass('locked').unbind('click')
        if (!allow_select_outofstock && !allow_backorders)
            bt = bt.filter('.in-stock')
        return bt.click(handle_click).filter('.auto-click').removeClass('auto-click').click();
    }

    function advance() {
        index++
        update();
        inventory(buttons.removeClass('locked'));
        enable(buttons);
    }

    function inventory(btns) {
        var keys, variants, selected = {};
        var sels = $.map(divs.find('a.selected'), function(i) { return i.rel });
        $.each(sels, function(key, value) {
            key = value.split('-');
            var v = options[key[0]][key[1]];
            keys = $.keys(v);
            var m = Array.find_matches(selection.concat(keys));
            if (selection.length == 0) {
                selection = keys;
            } else if (m) {
                selection = m;
            }
        });
        btns.removeClass('in-stock out-of-stock unavailable').each(function(i, element) {
            var variants = get_variant_objects(element.rel);
            var keys = $.keys(variants);
            if (keys.length == 0) {
                disable($(element).addClass('unavailable locked').unbind('click'));
            } else if (keys.length == 1) {
                _var = variants[keys[0]];
                $(element).addClass(_var.can_supply ? selection.length == 1 ? 'in-stock auto-click' : 'in-stock' : 'out-of-stock');
            } else if (allow_backorders) {
                $(element).addClass('in-stock');
            } else {
                var count = 0;
                $.each(variants, function(key, value) {
                    count += value.can_supply ? 1 : 0
                });
                $(element).addClass(count > 0 ? 'in-stock' : 'out-of-stock');
            }
        });
    }

    function get_variant_objects(rels) {
        var i, ids, obj, variants = {};
        if (typeof(rels) == 'string') { rels = [rels]; }
        var otid, ovid, opt, opv;
        i = rels.length;
        try {
            while (i--) {
                ids = rels[i].split('-');
                otid = ids[0];
                ovid = ids[1];
                opt = options[otid];
                if (opt) {
                    opv = opt[ovid];
                    ids = $.keys(opv);
                    if (opv && ids.length) {
                        var j = ids.length;
                        while (j--) {
                            obj = opv[ids[j]];
                            if (obj && $.keys(obj).length && 0 <= selection.indexOf(obj.id.toString())) {
                                variants[obj.id] = obj;
                            }
                        }
                    }
                }
            }
        } catch(error) {
            //console.log(error);
        }
        return variants;
    }

    function to_f(string) {
        return string ? parseFloat(string.replace(/[^\d\.]/g, '')) : 0;
    }

    // Find matching variants for selected option value
    // Set price or price range if matching variants have different prices.
    function find_variant() {
        var selected = divs.find('a.selected');
        var variants = get_variant_objects(selected.get(0).rel);
        if (selected.length == divs.length) {
            return variant = variants[selection[0]];
        } else {
            var prices = [];
            $.each(variants, function(key, value) { prices.push(value.price); });
            prices = $.unique(prices).sort(function(a, b) {
                return to_f(a) < to_f(b) ? -1 : 1;
            });
            if (prices.length == 1) {
                // $('#product-price .price').html('<span class="price assumed">' + prices[0] + '</span>');
            } else {
                $('#product-price .price').html('<span class="price from">' + prices[0] + '</span> - <span class="price to">' + prices[prices.length - 1] + '</span>');
            }
            // Añadimos esta linea para borrar el precio de costo mientras no se haya seleccionado el color.
            $('#product-price .cost-price').text('');
            return variants;
        }
    }

    function toggle(variants) {
        if (variant) {
            $('#variant_id, form[data-form-type="variant"] input[name$="[variant_id]"]').val(variant.id);
            $('#product-price .price').removeClass('unselected').text(variant.price.replace('$','€'));

            
            var id = variant.id;
            try {
                show_variant_images(variant.id);
            } catch(error) {
                // depends on modified version of product.js
            }
            // Parte añadida para mostrar precio de costo para cada una de las variants.
            if (variant.cost_price != 0 && variant.cost_price != null && variant.cost_price != undefined ) {
                $('#product-price .cost-price').text(variant.cost_price);

            } else {
                $('#product-price .cost-price').text('');
            }
            $("#price-title").css({"display": "inline"});
            $("#quantity").css({"display": "inline"});

        } else {
            if (variants) {
                variants_ids = $.keys(variants);
                show_variant_images(variants_ids.slice(0, 1));
            }
            $('#variant_id, form[data-form-type="variant"] input[name$="[variant_id]"]').val('');
            price = $('#product-price .price').addClass('unselected');
            // Replace product price by "(select)" only when there are at least 1 variant not out-of-stock
            variants = $("div.variant-options.index-0");
            // Añadimos esta linea para borrar el precio de costo en caso de borrar seleccion de color.
            $('#product-price .cost-price').text('');
            $("#price-title").css({"display": "none"});
            $("#quantity").css({"display": "none"});
        }
    }

    function clear(i) {
        variant = null;
        update(i);
        enable(buttons.removeClass('selected'));
        toggle();
        parent.nextAll().each(function(index, element) {
            disable($(element).find('a.option-value').show().removeClass('in-stock out-of-stock').addClass('locked').unbind('click'));
            $(element).find('a.clear-button').hide();
            $(element).find('h6 strong.selection').html('').removeClass('out-of-stock');
        });
        parent.find('strong.selection').html('').removeClass('out-of-stock');
        show_all_variant_images();
    }


    function handle_clear(evt) {
        evt.preventDefault();
        clear(get_index(this));
    }

    function handle_click(evt) {
        evt.preventDefault();
        variant = null;
        selection = [];
        var a = $(this);
        if (!parent.has(a).length) {
            window.history.pushState("object or string", "Title", window.location.origin + window.location.pathname + "?<%=SpreeVariantOptions::VariantConfig.main_option_type_label%>=" + a.attr("title"));
            clear(divs.index(a.parents('.variant-options:first')));
        }
        disable(buttons);
        var a = enable(a.addClass('selected'));
        parent.find('a.clear-button').css('display', 'inline-block');
        advance();
        handle_selected();
        variants = find_variant();
        toggle(variants);
    }

    function handle_selected() {
        var selected = divs.find('a.selected');
        selected.each(function(){
            $this = $(this)
            var selection = $this.parents('.variant-options').find('h6 strong.selection')
            selection.html($this.attr('title'));

            if ($this.hasClass('out-of-stock'))
                selection.addClass('out-of-stock').attr('title', i18n.out_of_stock);
        });
    };
    $(document).ready(init);
};
